// 20231129T1343 - 20231129T1447
// BOJ_14719 : 빗물
// Link : https://www.acmicpc.net/problem/14719
// 빗물이 쌓인 한 웅덩이에 대해서는 계산이 잘 되지만
// 두번째 웅덩이부터 어떻게 해야할 지 고민하다가 시간초과됨

#include <iostream>
#include <vector>
using namespace std;

int H, W;
int arr[501] = { -1, };
void main()
{	
	cin >> H >> W;

	vector<int> answer;
	int prev = 0;  // for문의 i를 증감시키면서 바로 직전에 쌓인 블럭의 갯수를 담는 변수
	int	high = 0;  // 가장 높은 벽돌을 체크하기 위함
	int temp = 0;  // 가로방향으로 진행하면서 누적된 빗물의 양을 담는 변수
	int count = 0; // 가로방향으로 진행하는 만큼을 카운트한다. (= 빗물을 계산하기 위한 변수 )
	for (int i = 1; i <= W; i++)
	{
		cin >> arr[i];	// 우선 해당칸에 쌓인 벽돌을 받는다.

		// 입력받은 벽돌의 수가 가장 높은 high 벽돌보다 작다면
		if (high > arr[i] ) 
		{
			// 맨 끝에 조건을 넣어야할 것 같은데 잘 모르겠음
			if (i == W)
			{

			}
			//
			int val = (high - arr[i]);	// 일단 무조건 높은 벽돌을 기준으로 계산하여 temp에 더해줌
			temp = temp + val;			// 누적 빗물의 양을 계산함
			count++;					// count를 증감시킴으로써 얼마만큼 진행했는지 체크할 수 있음
			cout << "i = " << i << "번째 val의 값 : " << val << endl;
		}
		// 가장 높은 벽돌이 나타났다면
		else if(high <= arr[i])
		{
			// 이제까지 빗물을 계산할 코드를 작성하는 부분
			{
				int a = high - arr[i];  // 높은 벽돌에서 현재에 위치한 벽돌을 빼줌
				if (a < 0) count = 0;   // a가 음수라면 현재에 위치한 벽돌이 높은 것임
				else count *= a;		// a가 양수라면 a를 곱해줌 ( 이제보니 의미없는 코드 )
				int b = temp - count;	// temp에다가 count의 값을 빼줌
				answer.push_back(b);	// 누적 빗물의 양을 vector에 넣어줌
			}

			// 변수의 초기화
			{
				high = arr[i];
				temp = 0;
				count = 0;
			}
		}		
		prev = arr[i]; // 이전 타일의 벽돌의 갯수를 갱신
	}

	// 출력
	{
		int result = 0;
		for (int i = 0; i < answer.size(); i++)
		{
			result += answer[i];
		}
		cout << result << endl;
	}
	
}
