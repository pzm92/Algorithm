// GPT Code

#include <iostream>
#include <vector>
#include <queue>

using namespace std;

int solve(int n, const vector<vector<int>>& cave) {
    vector<vector<int>> dp(n, vector<int>(n, -1));
    dp[0][0] = cave[0][0];

    // 최소 비용이 낮은 순서대로 처리하기 위하여 greater 를 이용해서 최소힙으로 만든다.
    // 맨 앞의 인자는 받을 값, 두번째 인자는 담을 저장소, 세번째 인자는 최소힙, 최대힙을 구분하기 위함
    priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>> pq;

    // 최초에는 시작 지점만이 우선순위 큐에 들어가게 되고, 이후에는 다익스트라 알고리즘에 따라 최소 비용의 경로가 업데이트되면서 큐에 다른 위치들이 추가됩니다.
    pq.push({ dp[0][0], {0, 0} });

    int dx[] = { -1, 1, 0, 0 }; 
    int dy[] = { 0, 0, -1, 1 }; // 좌, 우, 하, 상

    while (!pq.empty()) {
        int cost = pq.top().first;
        int x = pq.top().second.first;
        int y = pq.top().second.second;
        pq.pop(); // 값을 저장하고 루트노드를 pop 하여 버린다.

        for (int i = 0; i < 4; ++i) {
            int nx = x + dx[i];
            int ny = y + dy[i];

            // 상하좌우를 방문해서 그 중에서 싼 비용을 선택해서 가는 코드.
            if (nx >= 0 && nx < n && ny >= 0 && ny < n) {
                // 일단 상하좌우별로 cost 값을 계산
                int new_cost = cost + cave[nx][ny];
                                
                if (dp[nx][ny] == -1 || new_cost < dp[nx][ny]) {
                    dp[nx][ny] = new_cost;
                    pq.push({ new_cost, {nx, ny} });
                }
            }
        }
    }

    // 최종으로 계산된 비용을 리턴
    return dp[n - 1][n - 1];
}

int main() {
    int caseNum = 0;
    
    while (true) {
        int n;
        cin >> n;

        if (n == 0) {
            break;
        }

        vector<vector<int>> cave(n, vector<int>(n));
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                cin >> cave[i][j];
            }
        }

        int result = solve(n, cave);
        cout << "Problem " << ++caseNum << ": " << result << endl;
    }

    return 0;
}
